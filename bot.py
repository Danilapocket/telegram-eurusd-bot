import asyncio
import json
import numpy as np
import telebot
from datetime import datetime, timezone
import websockets

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TELEGRAM_TOKEN = "7566716689:AAGqf-h68P2icgJ0T4IySEhwnEvqtO81Xew"
USER_ID = 1671720900
SYMBOL = "FX:EURUSD"  # TradingView —Ñ–æ—Ä–º–∞—Ç –¥–ª—è OTC EUR/USD
INTERVAL = "1"  # 1 –º–∏–Ω—É—Ç–∞

bot = telebot.TeleBot(TELEGRAM_TOKEN)


def calculate_sma(prices, period=10):
    if len(prices) < period:
        return None
    return np.mean(prices[-period:])


def calculate_rsi(prices, period=14):
    if len(prices) < period + 1:
        return None
    deltas = np.diff(prices)
    seed = deltas[:period]
    up = seed[seed >= 0].sum() / period
    down = -seed[seed < 0].sum() / period
    rs = up / down if down != 0 else 0
    rsi = 100. - (100. / (1. + rs))
    for delta in deltas[period:]:
        upval = max(delta, 0)
        downval = -min(delta, 0)
        up = (up * (period - 1) + upval) / period
        down = (down * (period - 1) + downval) / period
        rs = up / down if down != 0 else 0
        rsi = 100. - (100. / (1. + rs))
    return round(rsi, 2)


def calculate_bollinger_bands(prices, period=20, std_dev_factor=2):
    if len(prices) < period:
        return None, None
    sma = np.mean(prices[-period:])
    std_dev = np.std(prices[-period:])
    upper_band = sma + std_dev_factor * std_dev
    lower_band = sma - std_dev_factor * std_dev
    return upper_band, lower_band


def calculate_macd(prices, slow=26, fast=12, signal=9):
    if len(prices) < slow + signal:
        return None, None, None
    ema_fast = ema(prices, fast)
    ema_slow = ema(prices, slow)
    macd_line = ema_fast - ema_slow
    signal_line = ema(macd_line[-signal:], signal)
    histogram = macd_line[-1] - signal_line[-1]
    return macd_line[-1], signal_line[-1], histogram


def ema(prices, period):
    ema_values = []
    k = 2 / (period + 1)
    for i, price in enumerate(prices):
        if i == 0:
            ema_values.append(price)
        else:
            ema_values.append(price * k + ema_values[-1] * (1 - k))
    return np.array(ema_values)


def generate_signal(prices):
    if len(prices) < 30:
        return None

    price_now = prices[-1]
    sma = calculate_sma(prices, 10)
    rsi = calculate_rsi(prices, 14)
    upper_band, lower_band = calculate_bollinger_bands(prices, 20)
    macd_line, signal_line, histogram = calculate_macd(prices)

    print(f"[{datetime.now(timezone.utc)}] price={price_now:.5f}, SMA={sma:.5f}, RSI={rsi}, BB_up={upper_band:.5f}, BB_low={lower_band:.5f}, MACD={macd_line:.5f}, Signal={signal_line:.5f}, Hist={histogram:.5f}")

    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:
    # CALL: –¶–µ–Ω–∞ –≤—ã—à–µ SMA, RSI < 30, MACD –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ç–µ—Ç, —Ü–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π BB (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)
    # PUT: –¶–µ–Ω–∞ –Ω–∏–∂–µ SMA, RSI > 70, MACD –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–∞–¥–∞–µ—Ç, —Ü–µ–Ω–∞ –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π BB (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)

    if price_now > sma and rsi is not None and rsi < 30 and histogram > 0 and price_now < lower_band:
        return "CALL", sma, rsi, price_now
    elif price_now < sma and rsi is not None and rsi > 70 and histogram < 0 and price_now > upper_band:
        return "PUT", sma, rsi, price_now
    else:
        return None


def send_signal(direction, sma, rsi, price_now):
    time_now = datetime.now(timezone.utc).strftime("%H:%M:%S UTC")
    emoji = "üü¢" if direction == "CALL" else "üî¥"
    message = f"""
üìä –°–∏–≥–Ω–∞–ª –ø–æ {SYMBOL} (1m)
üïí –í—Ä–µ–º—è: {time_now}
{emoji} {direction}

–¶–µ–Ω–∞: {price_now:.5f}
SMA(10): {sma:.5f}
RSI(14): {rsi}

‚ö†Ô∏è –≠—Ç–æ –Ω–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è.
"""
    bot.send_message(USER_ID, message)


async def tradingview_ws():
    url = "wss://data.tradingview.com/socket.io/websocket"
    prices = []

    async with websockets.connect(url) as ws:
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ç–∏–∫–µ—Ä –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª
        # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ open source TradingView WS clients

        # –ü—Ä–∏–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏, –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ TradingView protocol
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã - —Å—é–¥–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã–π JSON

        # TODO: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ EURUSD —Å 1m –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        # –ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ç–æ—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.

        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞: –±—É–¥–µ–º —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω
        while True:
            msg = await ws.recv()
            data = json.loads(msg)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –Ω—É–∂–Ω–æ –≤—ã—Ç–∞—â–∏—Ç—å —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ –∏–∑ data
            # –î–æ–±–∞–≤–∏–º —Ü–µ–Ω—É –≤ prices, —É–¥–µ—Ä–∂–∏–≤–∞—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–Ω–∞—á–µ–Ω–∏–π
            # prices.append(close_price)
            # if len(prices) > 100:
            #     prices.pop(0)

            # –ü–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            signal = generate_signal(prices)
            if signal:
                direction, sma, rsi, price_now = signal
                send_signal(direction, sma, rsi, price_now)

            await asyncio.sleep(60)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram polling –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    import threading

    def telegram_polling():
        bot.infinity_polling()

    threading.Thread(target=telegram_polling, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º asyncio event loop –¥–ª—è WS
    asyncio.run(tradingview_ws())
