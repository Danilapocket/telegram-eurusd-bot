import time
import requests
import telebot
import logging
from datetime import datetime, timezone, timedelta

# –¢–æ–∫–µ–Ω—ã
TWELVEDATA_API_KEY = 'e5626f0337684bb6b292e632d804029e'
TELEGRAM_BOT_TOKEN = '7566716689:AAGqf-h68P2icgJ0T4IySEhwnEvqtO81Xew'
TELEGRAM_CHAT_ID = 1671720900

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
DAY_START = 9   # –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ UTC+3
DAY_END = 22    # –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ UTC+3
ADVANCE_SECONDS = 20  # —Å–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª

# Telegram-–±–æ—Ç
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(message)s')

status = {'active': True}
stats = {'CALL': 0, 'PUT': 0, 'total': 0}
last_signal = None

def get_candles(symbol='EUR/USD', interval='1min', outputsize=3):
    url = 'https://api.twelvedata.com/time_series'
    params = {
        'symbol': symbol,
        'interval': interval,
        'apikey': TWELVEDATA_API_KEY,
        'format': 'JSON',
        'outputsize': outputsize
    }
    try:
        response = requests.get(url, params=params)
        data = response.json()
        if data.get('status') == 'error':
            logging.error(f"–û—à–∏–±–∫–∞ API: {data}")
            if data.get('code') == 429:
                return 'limit_exceeded'
            return None
        return data.get('values')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫: {e}")
        return None

def generate_signal(candles):
    if not candles or len(candles) < 3:
        return None
    close0 = float(candles[0]['close'])
    close1 = float(candles[1]['close'])
    close2 = float(candles[2]['close'])
    if close0 > close1 > close2:
        return 'CALL'
    if close0 < close1 < close2:
        return 'PUT'
    return None

def send_signal(signal):
    global last_signal
    if signal == last_signal:
        return
    last_signal = signal
    stats[signal] += 1
    stats['total'] += 1

    tz = timezone(timedelta(hours=3))
    now = datetime.now(tz).strftime('%H:%M:%S')
    msg = f"üìâ –°–∏–≥–Ω–∞–ª –ø–æ EUR/USD: {signal}\nüïí –í—Ä–µ–º—è (UTC+3): {now}"
    bot.send_message(TELEGRAM_CHAT_ID, msg)
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal} ({now} UTC+3)")

def main_loop():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    tz = timezone(timedelta(hours=3))
    while True:
        if not status['active']:
            time.sleep(5); continue

        now = datetime.now(tz)
        hour = now.hour
        second = now.second

        # –í —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è?
        if not (DAY_START <= hour < DAY_END):
            time.sleep(60); continue

        if second >= 60 - ADVANCE_SECONDS:
            candles = get_candles()
            if candles == 'limit_exceeded':
                logging.warning("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API. –ñ–¥—ë–º 1 —á–∞—Å.")
                time.sleep(3600); continue
            if not candles:
                time.sleep(60); continue

            signal = generate_signal(candles)
            if signal:
                send_signal(signal)

            # –ñ–¥—ë–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ª–µ–¥—É—é—â—É—é –º–∏–Ω—É—Ç—É
            time.sleep(60 - second)
        else:
            time.sleep(0.5)

@bot.message_handler(commands=['start'])
def handle_start(msg):
    status['active'] = True
    bot.send_message(msg.chat.id, "üü¢ –°–∏–≥–Ω–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã")

@bot.message_handler(commands=['stop'])
def handle_stop(msg):
    status['active'] = False
    bot.send_message(msg.chat.id, "üî¥ –°–∏–≥–Ω–∞–ª—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")

@bot.message_handler(commands=['status'])
def handle_status(msg):
    state = "–≤–∫–ª—é—á–µ–Ω—ã" if status['active'] else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    bot.send_message(msg.chat.id, f"‚öôÔ∏è –°–∏–≥–Ω–∞–ª—ã {state}")

@bot.message_handler(commands=['stats'])
def handle_stats(msg):
    bot.send_message(
        msg.chat.id,
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nCALL: {stats['CALL']}\nPUT: {stats['PUT']}\n–í—Å–µ–≥–æ: {stats['total']}"
    )

if __name__ == '__main__':
    import threading
    threading.Thread(target=main_loop, daemon=True).start()
    bot.remove_webhook()
    bot.polling(none_stop=True)
