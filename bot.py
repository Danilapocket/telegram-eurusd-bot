import time
import requests
import telebot
import logging
from datetime import datetime, timedelta
import threading

# –¢–æ–∫–µ–Ω—ã
TWELVEDATA_API_KEY = 'e5626f0337684bb6b292e632d804029e'
TELEGRAM_BOT_TOKEN = '7566716689:AAGqf-h68P2icgJ0T4IySEhwnEvqtO81Xew'
TELEGRAM_CHAT_ID = 1671720900

# Telegram-–±–æ—Ç
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(message)s')

# –°—Ç–∞—Ç—É—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
status = {'active': True}
stats = {'CALL': 0, 'PUT': 0, 'total': 0}
last_signal = None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
def get_candles(symbol='EUR/USD', interval='1min', outputsize=3):
    url = 'https://api.twelvedata.com/time_series'
    params = {
        'symbol': symbol,
        'interval': interval,
        'apikey': TWELVEDATA_API_KEY,
        'format': 'JSON',
        'outputsize': outputsize
    }
    try:
        response = requests.get(url, params=params)
        data = response.json()
        if 'status' in data and data['status'] == 'error':
            logging.error(f"–û—à–∏–±–∫–∞ API: {data}")
            if data['code'] == 429:
                return 'limit_exceeded'
            return None
        return data.get('values')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫: {e}")
        return None

# –°—Ç—Ä–∞—Ç–µ–≥–∏—è
def generate_signal(candles):
    if not candles or len(candles) < 3:
        return None

    close_0 = float(candles[0]['close'])
    close_1 = float(candles[1]['close'])
    close_2 = float(candles[2]['close'])

    diff1 = close_0 - close_1
    diff2 = close_1 - close_2

    if diff1 > 0 and diff2 > 0:
        return 'CALL'
    elif diff1 < 0 and diff2 < 0:
        return 'PUT'
    else:
        return None

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram
def send_signal(signal):
    global last_signal
    if signal == last_signal:
        logging.info("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–∏–≥–Ω–∞–ª ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.")
        return
    last_signal = signal
    stats[signal] += 1
    stats['total'] += 1

    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC+3
    local_time = datetime.utcnow() + timedelta(hours=3)
    formatted_time = local_time.strftime('%H:%M:%S')

    text = (
        f"üìâ –°–∏–≥–Ω–∞–ª –ø–æ EUR/USD: {signal}\n"
        f"üïê –í—Ä–µ–º—è: {formatted_time} (UTC+3)\n"
        f"üìà –≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è: 1 –º–∏–Ω—É—Ç–∞"
    )
    bot.send_message(TELEGRAM_CHAT_ID, text)
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal}")

# Telegram-–∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['start'])
def handle_start(message):
    status['active'] = True
    bot.send_message(message.chat.id, "üü¢ –°–∏–≥–Ω–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã")

@bot.message_handler(commands=['stop'])
def handle_stop(message):
    status['active'] = False
    bot.send_message(message.chat.id, "üî¥ –°–∏–≥–Ω–∞–ª—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")

@bot.message_handler(commands=['status'])
def handle_status(message):
    state = "–≤–∫–ª—é—á–µ–Ω—ã" if status['active'] else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    bot.send_message(message.chat.id, f"‚öô –°—Ç–∞—Ç—É—Å: —Å–∏–≥–Ω–∞–ª—ã {state}")

@bot.message_handler(commands=['stats'])
def handle_stats(message):
    bot.send_message(
        message.chat.id,
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nCALL: {stats['CALL']}\nPUT: {stats['PUT']}\n–í—Å–µ–≥–æ: {stats['total']}"
    )

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
def main_loop():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    while True:
        if not status['active']:
            time.sleep(5)
            continue

        now = datetime.utcnow() + timedelta(hours=3)
        if not (8 <= now.hour < 24):
            logging.info("–í–Ω–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (08:00‚Äì00:00 UTC+3).")
            time.sleep(60)
            continue

        candles = get_candles()
        if candles == 'limit_exceeded':
            logging.warning("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API. –ñ–¥—ë–º 1 —á–∞—Å.")
            time.sleep(3600)
            continue
        if not candles:
            logging.info("–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ —Ä—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç.")
            time.sleep(60)
            continue

        signal = generate_signal(candles)
        if signal:
            # –ñ–¥—ë–º, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞ 15‚Äì20 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏
            now = datetime.utcnow()
            seconds = now.second
            delay = 60 - seconds - 15
            if delay > 0:
                time.sleep(delay)
            send_signal(signal)
        else:
            logging.info("–°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
            time.sleep(60)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    threading.Thread(target=main_loop).start()
    bot.polling(none_stop=True)
